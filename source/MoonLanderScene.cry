import Graphics2D;
import Math;

class MoonLanderScene : AbstractScene {
	
	field currentGravity = .2;
	field sprites = [];
	field player;
	field landscape;
	
	field planetSpriteFromSpaceScene;
	field planetLabel;
	field stardate;
	field walzyx = null;
	
	constructor(stardate, planetSpriteFromSpaceScene) : base() {
		this.planetSpriteFromSpaceScene = planetSpriteFromSpaceScene;
		this.planetLabel = planetSpriteFromSpaceScene.label;
		this.stardate = stardate;
		
		this.landscape = new Landscape(planetSpriteFromSpaceScene);
		this.player = new LanderShip(this);
		this.player.y = -1400;
		this.sprites = [this.player];
		
		this.update(null);
		
		if (GameSession.ACTIVE_SESSION.waldoLabel == this.planetLabel) {
			chunk = this.landscape.getChunkAt(this.player.x);
			this.walzyx = [chunk.absoluteX + chunk.width / 2, chunk.topY];
		}
	}
	
	function update(input) {
		
		for (sprite : this.sprites) {
			dx = sprite.x - this.player.x;
			dy = sprite.y - this.player.y;
			distance = (dx ** 2 + dy ** 2) ** .5;
			if (distance < 1500) {
				sprite.update();
				sprite.isNear = true;
			} else {
				sprite.isNear = false;
			}
		}
		
		if (input != null) {
			if (input.pressed && input.y > HEIGHT / 2 && input.y < HEIGHT / 2 + 110) {
				
				vx = (input.x - WIDTH / 2) / 100.0;
				vy = (input.y - HEIGHT / 2) / 100.0;
				if (vx ** 2 + vy ** 2 < 1) {
					if (input.y > HEIGHT / 2) {
						this.player.vx -= vx * .7;
						this.player.vy -= vy * .33;
					}
				}
			}
		}
		
		if (this.player.y < -1600) {
			planet = this.planetSpriteFromSpaceScene;
			if (planet.type == SpaceObjectType.MOON) planet = planet.parent;
			x = planet.x;
			y = planet.y;
			stardate = this.stardate + 90; // advance the stardate 1.5 seconds to avoid collision
			space = new SpaceScene(this.stardate + 90, x, y);
			space.update(null);
			this.switchScene(new TransitionScene(this, space));
		}
		
		chunk = this.landscape.getChunkAt(this.player.x);
		if (chunk.hat != null) {
			hat = chunk.hat;
			dx = hat.x - this.player.x;
			dy = hat.y - this.player.y;
			d = (dx ** 2 + dy ** 2) ** .5;
			if (d < 10 + this.player.radius) {
				session = GameSession.ACTIVE_SESSION;
				session.hatsCollected[hat.key] = true;
				newHatCount = session.hatCountForPlanet.get(this.planetLabel, 0) + 1;
				session.hatCountForPlanet[this.planetLabel] = newHatCount;
				chunk.hat = null;
				SoundPlayer.play(Sfx.HAT_PICKUP);
				if (newHatCount == 3) {
					session.updateKnownRadiation(this.planetSpriteFromSpaceScene);
				}
			}
		}
		
		if (this.walzyx != null) {
			img = ImageLibrary.get('walxyz.png');
			left = this.walzyx[0] - img.width / 2;
			bottom = this.walzyx[1];
			top = bottom - img.height;
			right = left + img.width;
			
			if (this.player.x > left && this.player.x < right &&
				this.player.y < bottom && this.player.y > top) {
				
				// you win!
				this.switchScene(new TransitionScene(this, new WinScene()));
			}
		}
	}
	
	function render(rc) {
		cameraX = Math.floor(this.player.x - WIDTH / 2);
		cameraY = Math.floor(this.player.y - HEIGHT / 2);
		
		this.drawBackground();
		
		groundY = -cameraY;
		
		thin = [
			ImageLibrary.get(this.planetSpriteFromSpaceScene.style + '/thin1.png'),
			ImageLibrary.get(this.planetSpriteFromSpaceScene.style + '/thin2.png'),
			ImageLibrary.get(this.planetSpriteFromSpaceScene.style + '/thin3.png'),
		];
		wide = [
			ImageLibrary.get(this.planetSpriteFromSpaceScene.style + '/wide1.png'),
			ImageLibrary.get(this.planetSpriteFromSpaceScene.style + '/wide2.png'),
			ImageLibrary.get(this.planetSpriteFromSpaceScene.style + '/wide3.png'),
		];
		
		
		hatImg = ImageLibrary.get('hat.png');
		
		for (chunk = this.landscape.getChunkAt(cameraX); // leftmost chunk on the screen
			chunk.absoluteX - cameraX < WIDTH; // is it actually on the screen?
			chunk = this.landscape.getChunkAt(chunk.absoluteX + chunk.width + 1)) { // get the chunk at the right of this one
			
			color = chunk.color;
			lookup = chunk.width == 100 ? thin : wide;
			img = lookup[chunk.style - 1];
			img.draw(chunk.absoluteX - cameraX, chunk.topY - cameraY);
			/*
			Draw.rectangle(
				chunk.absoluteX - cameraX, chunk.topY - cameraY,
				chunk.width, chunk.height,
				color[0], color[1], color[2]);
			//*/
			
			if (chunk.hat != null) {
				hat = chunk.hat;
				hatImg.draw(hat.x - 10 - cameraX, hat.y - 20 - cameraY);
				//Draw.ellipse(hat.x - 10 - cameraX, hat.y - 20 - cameraY, 20, 20, 255, 255, 255);
			}
		}
		
		for (sprite : this.sprites) {
			if (sprite.isNear) {
				sprite.render(cameraX, cameraY);
			}
		}
		
		for (i = 0; i < 40; ++i) {
			x = Math.floor(Math.cos(2 * 3.14159 / 40 * i + rc / 100.0) * 100 +  WIDTH / 2);
			y = Math.floor(Math.sin(2 * 3.14159 / 40 * i + rc / 100.0) * 100 +  HEIGHT / 2);
			if (y > HEIGHT / 2) {
				Draw.rectangle(x - 2, y - 2, 4, 4, 0, 0, 255);
			}
		}
		
		if (this.walzyx != null) {
			img = ImageLibrary.get('walxyz.png');
			x = this.walzyx[0] - img.width / 2;
			y = this.walzyx[1] - img.height;
			img.draw(x - cameraX, y - cameraY);
		}
		
		session = GameSession.ACTIVE_SESSION;
		hats = session.hatCountForPlanet.get(this.planetLabel, 0);
		txt = "Hats: " + hats + " / 3";
		if (hats >= 3) {
			txt += "\n" + session.getRadiationForBody(this.planetSpriteFromSpaceScene);
		}
		TextEngine.render(txt, 'red', FontSize.M, 10, 10);
	}
	
	function drawBackground() {
	
		// Draw the stars
		stars = ImageLibrary.get('stars.png');
		x = Math.floor(this.player.x * -.4) % 1000;
		y = Math.floor(this.player.y * -.4) % 1000;
		stars.draw(x, y);
		stars.draw(x - 1000, y);
		stars.draw(x, y - 1000);
		stars.draw(x - 1000, y - 1000);
		
		
		// Draw the sky where the opacity correlates to altitude
		// y = -500 to -1500 maps to 255 to 0
		skyOpacity = Math.floor(((this.player.y + 500) / 1000 + 1) * 255);
		skyOpacity = Math.ensureRange(skyOpacity, 0, 255);
		Draw.rectangle(0, 0, WIDTH, HEIGHT, 100, 180, 220, skyOpacity);
		
	}
}
