import Math;

class Landscape {
	field random;
	field plotsByX = {};
	
	constructor(planetName) {
		this.random = new SeedableRandom(planetName);
	}
	
	function _getPlot(plotNum) {
		plot = this.plotsByX.get(plotNum);
		if (plot == null) {
			this.random.initSeed('tiles', plotNum, 0);
			plot = new LandscapePlot(this.random, plotNum);
			this.plotsByX[plotNum] = plot;
		}
		return plot;
	}
	
	function getChunkAt(pixelX) {
		pixelX = Math.floor(pixelX);
		remainder = pixelX % 1000;
		plotNum = (pixelX - remainder) / 1000; // pixelX / 1000 will not work as I want this to round down.
		slotNum = remainder / 100;
		if (slotNum < 0 || slotNum > 9) fail("Slot out of range.");
		plot = this._getPlot(plotNum);
		chunk = plot.chunkBySlot[slotNum];
		lx = chunk.localX / 100;
		if (lx != slotNum && lx != slotNum - 1) fail("unexpected chunk location");
		return chunk;
	}
}

/*
	A plot represents a 1000-pixel wide plot on the planet's surface.
	Each plot has a series of 100 or 200 pixel wide columns. There are between 1 and 3 200 pixel columns.
	The height of these columns ranges from 100 to 400.
	The incoming random number generator has been seeded for this specific plot, so returning to a planet multiple times will
	always yield the same landscape.
*/
class LandscapePlot {
	field columns = []; // each element is a list of [width (100 or 200), height (100.0-400.0), style (0-2)]
	field chunkBySlot = [];
	
	constructor(random, plotNum) {
		absoluteX = plotNum * 1000;
		wides = random.getNextSmallInt() % 3 + 1;
		slotsRemaining = 10;
		for (i = 0; i < wides; ++i) {
			chunk = new LandscapeChunk();
			chunk.width = 200;
			this.columns.add(chunk);
			slotsRemaining -= 2;
		}
		
		while (slotsRemaining > 0) {
			chunk = new LandscapeChunk();
			chunk.width = 100;
			slotsRemaining -= 1;
			this.columns.add(chunk);
		}
		
		random.shuffle(this.columns);
		
		x = 0;
		for (chunk : this.columns) {
			chunk.style = random.getNextSmallInt() % 3 + 1;
			
			chunk.topY = -Math.floor(random.getNextFloatFast() * 300 + 100);
			
			chunk.height = 1000;
			chunk.localX = x;
			chunk.absoluteX = chunk.localX + absoluteX;
			for (i = 0; i < chunk.width; i += 100) {
				this.chunkBySlot.add(chunk);
			}
			x += chunk.width;
			
			switch (chunk.style) {
				case 1: chunk.color = LandscapeChunk.RED; break;
				case 2: chunk.color = LandscapeChunk.GREEN; break;
				case 3: chunk.color = LandscapeChunk.BLUE; break;
				default: return fail();
			}
		}
		
		assert(this.chunkBySlot.length == 10);
	}
}

class LandscapeChunk {
	static field RED = [255, 0, 0];
	static field GREEN = [0, 128, 0];
	static field BLUE = [0, 80, 180];
	
	field localX;
	field absoluteX;
	field width;
	field height;
	field topY;
	field style;
	field color;
	field top;
	
	constructor() { }
}

