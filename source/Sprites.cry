import Math;

class Sprite {
	field x = 0.0;
	field y = 0.0;
	field vx = 0.0;
	field vy = 0.0;
	field isDead = false;
	field isNear = false;
	field radius = 10.0;
	field collisionVelocity = null;
	field scene;
	
	constructor(scene) {
		this.scene = scene;
	}
	
	function update() {
		this.collisionVelocity = null;
		
		this.vy += this.scene.currentGravity;
		
		// cap velocity at 8 pixels per frame (that's 2 seconds to traverse an entire screen width @ 60 FPS)
		v = (this.vx ** 2 + this.vy ** 2) ** .5;
		if (v > 8) {
			this.vx = 8.0 * this.vx / v;
			this.vy = 8.0 * this.vy / v;
			v = 8.0;
		}
		
		// Try moving 3 times, each time splitting half the distance.
		// This is super tacky, but hey, it's a game jam.
		// The collision velocity is applied after the first attempt.
		cv = this.doMovement(1);
		this.collisionVelocity = cv;
		
		if (cv != null && cv > 2) {
			cv = this.doMovement(.5);
			if (cv != null && cv > 2) {
				cv = this.doMovement(.25);
			}
			
		}
		
		if (cv != null) {
			this.vx = 0;
			this.vy = 0;
		}
		
	}
	
	function doMovement(velocityRatio) {
		
		newX = this.x + this.vx * velocityRatio;
		newY = this.y + this.vy * velocityRatio;
		
		isCollision = this.scene.landscape.doCollisionDetection(newX, newY, this.radius);
		if (isCollision) {
			return velocityRatio * (this.vx ** 2 + this.vy ** 2) ** .5;
		}
		
		this.x = newX;
		this.y = newY;
		
		return null;
	}
	
	function render(cameraX, cameraY) {
		throw new Exception("Override me");
	}
	
	function getAngleOffsetFromVerticallyAligned() {
		return Math.arctan(this.vx, this.vy);
	}
}

class LanderShip : Sprite {

	field img;
	constructor(scene) : base(scene) {
		this.radius = 15;
		this.img = ImageLibrary.get('lander.png');
	}
	
	function render(cameraX, cameraY) {
		x = Math.floor(this.x - cameraX);
		y = Math.floor(this.y - cameraY - this.radius);
		thetaOffset = this.getAngleOffsetFromVerticallyAligned() / 4.0;
		this.img.drawRotated(x, y, thetaOffset);
	}
}
